<?php

function cablecast_node_info() {
  $items = array(
    'cablecast_show' => array(
      'name' => t('Cablecast Show'),
      'base' => 'node_content',
      'description' => t('Represents a show from a cablecast server.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'help' => '',
      'locked' => TRUE,
    ),
    'cablecast_project' => array(
      'name' => t('Cablecasst Project'),
      'base' => 'node_content',
      'description' => t('Represents a Cablecast Project.'),
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'help' => '',
      'locked' => TRUE,
    ),
  );
  return $items;
}

function cablecast_menu() { 
  $items = array(); 
  $items['admin/config/cablecast'] = array( 
    'title' => 'Cablecast Configuration',
    'description' => 'Configuration for the Cablecast module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cablecast_configure_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function cablecast_configure_form($form, &$form_state) {
  // Text Field for Cablecast Server URL
  $form['cablecast_server_url'] = array( 
    '#type' => 'textfield',
    '#title' => t('Cablecast Server URL'),
    '#description' => t('The publicly available url of your Cablecast server.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => 'http://demo.trms.com',
  ); 
  // Textarea for the body of the e-mail. 
  $form['cablecast_location_id'] = array( 
    '#type' => 'textfield', 
    '#size' => 3, 
    '#title' => t('Cablecast Location ID'), 
    '#required' => TRUE,
    '#description' => t('The LocationID of the Cablecast Location you would like to sync from.'),
    '#default_value' => 22,
  );

  return system_settings_form($form);
}
function cablecast_cron() {
  if($cablecast_server_uri = variable_get('cablecast_server_url', 0)) {
    
    $cablecast_server_uri = $cablecast_server_uri . "/CablecastWS/CablecastWS.asmx?WSDL";
    $client = new SoapClient($cablecast_server_uri, array('cache_wsdl' => 0));

    _cablecast_sync_projects($client);
    _cablecast_sync_shows($client);
  }
}

function _cablecast_sync_projects($client) {
  watchdog('Cablecast', 'Syncing Projects');
  //Projects don't have a last modified date.
  //So we need to manually see if they have changed by checking properties

  //We need a channelID. This will only work for single location systems. We will make it more
  //robust in the future.
  $channels = $client->GetChannels();
  $channels = $channels->GetChannelsResult->Channel;
  if(!is_array($channels)) {
    $channels = array($channels);
  }

  $channel_id = $channels[0]->ChannelID;

  $projects = $client->GetProjects(array("ChannelID" => $channel_id));
  $projects = $projects->GetProjectsResult->Project;
  if(!is_array($projects)) {
    $projects = array($projects);
  }

  foreach($projects as $project) {
    //See if we already have the project in drupal
    $sql = 'SELECT entity_id FROM {field_data_cablecast_project_id} cc WHERE cc.cablecast_project_id_value = :project_id';
    $nid = db_query($sql, array(':project_id' => $project->ProjectID))->fetchField();


    if($nid == false) {
      $node = new stdClass();
      $node->type = 'cablecast_project';

      node_object_prepare($node);
      $node->language = LANGUAGE_NONE;
      $node->uid = 1;

      //We only set the title and body on first creation
      //This allows users to use these fields for what they want in drupal
      //without values getting overridden on update
      $node->title = $project->Name;
      $node->body['und'][0]['value'] = $project->Description;
    }
    else {
      $node = node_load($nid);
    }

    if(_cablecast_check_if_project_is_changed($node, $project)) {
      $node->cablecast_project_id['und'][0]['value'] = $project->ProjectID;
      $node->cablecast_project_name['und'][0]['value'] = $project->Name;
      $node->cablecast_project_description['und'][0]['value'] = $project->Description;

      node_save($node);
    }
  }
}

function _cablecast_sync_shows($client) {
  watchdog('Cablecast', 'Syncing Shows');
  try {
      $cablecast_location_id = variable_get('cablecast_location_id', 22);
      $cablecast_last_sync = variable_get("cablecast_last_sync_location_" . $cablecast_location_id,
                                          '1900-01-01T12:00:00');

      $params = array("LocationID" => $cablecast_location_id, "SearchDate" => $cablecast_last_sync, "DateComparator" => ">");

      $cablecast_updated_shows = $client->LastModifiedSearch($params);
      $cablecast_updated_shows = $cablecast_updated_shows->LastModifiedSearchResult->ShowInfo;

      if(!is_array($cablecast_updated_shows)) {
        $cablecast_updated_shows = array($cablecast_updated_shows);
      }

      foreach($cablecast_updated_shows as $show) {
          watchdog("Cablecast", "Syncing show: @showID", array('@showID' => $show->ShowID));
          $sql = 'SELECT entity_id FROM {field_data_cablecast_show_id} cc WHERE cc.cablecast_show_id_value = :show_id';
          $nid = db_query($sql,
            array(
              ':show_id' => $show->ShowID,
            )
          )->fetchField();

          if($nid == false) {
            $node = new stdClass();
            $node->type = 'cablecast_show';

            node_object_prepare($node);

            $node->language = LANGUAGE_NONE;
            $node->uid =1;
            
          }
          // Load node for shows that do exist
          else {    
            $node = node_load($nid);
          }

          $node->title = $show->Title;
          $node->cablecast_show_id['und'][0]['value'] = $show->ShowID;
          $node->cablecast_show_title['und'][0]['value'] = $show->InternalTitle;
          $node->cablecast_show_cg_title['und'][0]['value'] = $show->Title;
          $node->cablecast_show_comments['und'][0]['value'] = $show->Comments;
          $node->cablecast_show_trt['und'][0]['value'] = $show->TotalSeconds;
          $node->cablecast_show_event_date['und'][0]['value'] = $show->EventDate;
          $node->cablecast_show_last_modified['und'][0]['value'] = $show->LastModified;
          $node->cablecast_show_vod_url['und'][0]['value'] = $show->StreamingFileURL;
          $node->cablecast_show_project_reference['und'][0]['target_id'] = _cablecast_get_project_nid($show->ProjectID);

          //Taxonomy
          $node->cablecast_category['und'][]['tid'] = _cablecast_get_category_term($show->Category);

          watchdog("Cablecast", "Syncing Show: @showName", array('@showName' => $node->title));
          node_save($node);
          $cablecast_last_sync = $show->LastModified;
      }

      variable_set("cablecast_last_sync_location_".$cablecast_location_id, $cablecast_last_sync);
  }
  catch(SoapFault $fault)  {
    watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
  }
}

function _cablecast_get_category_term($category) {
  $vid = variable_get('cablecast_categories_vid', false);
  if($vid == false) {
    throw new Exception("Could not find Cablecast Cateogory Taxonomy", 1);
    
  }

  $terms = taxonomy_get_term_by_name($category);
  foreach ($terms as $term) {
    if($term->vid == $vid) {
      return $term->tid;
    }
  }

  //Term doesn't exist create it
  $new_term = array(
    'vid' => $vid,
    'name' => $category,
  );
  $new_term = (object) $new_term;
  taxonomy_term_save($new_term);

  return $new_term->tid;
}

function _cablecast_check_if_project_is_changed($node, $project) {
  return !($node->cablecast_project_name['und'][0]['value'] == $project->Name &&
           $node->cablecast_project_description['und'][0]['value'] == $project->Description
          ); 
}

function _cablecast_get_project_nid($project_id) {
  $sql = 'SELECT entity_id FROM {field_data_cablecast_project_id} cc WHERE cc.cablecast_project_id_value = :project_id';
    $nid = db_query($sql, array(':project_id' => $project_id))->fetchField();

  return (int)$nid;
}